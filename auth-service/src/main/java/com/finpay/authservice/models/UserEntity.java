package com.finpay.authservice.models;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

/**
 * Entity class representing a user in the system.
 * Implements Spring Security's UserDetails interface for authentication and authorization.
 * Contains user personal information, credentials, role, and location.
 */
@Entity
@Table(name = "users")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserEntity implements UserDetails {

    /**
     * Unique identifier for the user.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue
    private Long id;

    /**
     * Unique username for authentication.
     */
    private String username;

    /**
     * User's email address.
     */
    private String email;

    /**
     * User's first name.
     */
    private String firstName;

    /**
     * User's last name.
     */
    private String lastName;

    /**
     * User's encrypted password.
     * Stored as a BCrypt hash for security.
     */
    private String password;

    /**
     * User's assigned role (e.g., USER, ADMIN).
     * Many-to-one relationship with Role entity.
     */
    @ManyToOne
    @JoinColumn(name = "role_id")
    private Role role;

    /**
     * User's associated location.
     * Many-to-one relationship with Location entity.
     * Eagerly fetched and required (not optional).
     */
    @ManyToOne(fetch = FetchType.EAGER, optional = false)
    @JoinColumn(name = "location_id")
    private Location location;

    /**
     * Returns the authorities granted to the user (UserDetails interface).
     * Converts the user's role to a Spring Security GrantedAuthority.
     *
     * @return Collection containing the user's role as a GrantedAuthority
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(role.getRoleName()));
    }

    /**
     * Indicates whether the user's account has expired (UserDetails interface).
     * Currently always returns true (accounts don't expire).
     *
     * @return true (account is non-expired)
     */
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    /**
     * Indicates whether the user's account is locked (UserDetails interface).
     * Currently always returns true (accounts are never locked).
     *
     * @return true (account is non-locked)
     */
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    /**
     * Indicates whether the user's credentials have expired (UserDetails interface).
     * Currently always returns true (credentials don't expire).
     *
     * @return true (credentials are non-expired)
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    /**
     * Indicates whether the user is enabled (UserDetails interface).
     * Currently always returns true (all users are enabled).
     *
     * @return true (user is enabled)
     */
    @Override
    public boolean isEnabled() {
        return true;
    }
}


